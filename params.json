{
  "name": "TrabalhoICG",
  "tagline": "Rasterização de Primitivas",
  "body": "## Introdução\r\nEste post faz parte do primeiro trabalho da disciplina Introdução à Computação Gráfica, ministrada pelo Prof. Christian Azambuja Pagot da UFPB, no período 2016.1.\r\n\r\nDeve ser implementado um algoritmo para rasterização de pontos, linhas e triângulos, para isso, será usado um framework disponibilizado pelo próprio professor, que simula o acesso a memória, mais especificamente simula acesso ao ColorBuffer do FrameBuffer, onde fica as informações da imagem que aparece na tela do computador.\r\n\r\n### Pixels\r\nOs monitores exibem as imagens através de um conjuntos de pontos, chamados de pixel, dessa forma, um monitor tem W pixels de largura e H pixels de altura, como se fosse uma matriz W por H. \r\n\r\nCada pixel é representado na memória por um conjunto de 4 bytes, onde o primeiro dizemos que é o byte R(de red, vermelho), o segundo é o G(de green, verde), o terceiro é o B(de blue, azul), e o ultimo o A(alpha, controla a opacidade/transparência), com a combinação destes, podemos formar uma grande porção das cores visíveis ao olho humano.\r\n\r\n![Composição de um Pixel](https://soaresgabriel.github.io/TrabalhoICG/images/pixelscreen.png)\r\n\r\nOs pixels são distribuídos na tela como uma matriz (bi-dimensional), mas na memoria eles são armazenados linearmente, de forma que os bytes dos pixeis da segunda linha são armazenados logo após os da primeira e assim sucessivamente. Há uma região reservada da memoria em que esses bytes são gravados, que é chamada de ColorBuffer.\r\n\r\nDessa forma tendo as coordenadas x e y de um pixel, podemos encontrar sua posição na memória através da expressão `x*4 + y*W*4`, onde a posição 0 indica primeira posição do ColorBuffer(e não da memoria em si).\r\n\r\n![Pixel na memória](https://soaresgabriel.github.io/TrabalhoICG/images/screenpixel.png)\r\n\r\n### Representação de Primitivas\r\nObviamente um monitor pode comportar um número limitado de pixels, então qualquer objeto que queiramos mostrar em uma tela, será formado por um conjunto finito de pixels. \r\n\r\nMas uma reta, por exemplo, é um objeto contínuo: pegando um ponto da reta, não conseguimos definir qual é o próximo ponto, pois entre quaisquer dois pontos de uma reta, existem infinitos pontos, não importa o quão próximos eles estejam. Dessa forma, para desenhar uma reta outro objeto continuo em uma tela, precisamos criar uma aproximação discreta que poderá ser representada por um conjunto finito de pontos, esse processo é chamado de **rasterização**.\r\n\r\n\r\n# Desenvolvimento do Projeto\r\nCom essa noção básica, podemos começar a desenvolver o projeto, ele consiste basicamente em desenvolver três funções:\r\n* **putPixel** - Rasterizar ponto (ou Pixel), com sua devida cor.\r\n* **drawLine** - Rasterizar linha, deve ter interpolação linear de cores\r\n* **drawTriangle** - Rasterizar triângulo\r\n\r\nPara simplificar, na implementação foi definido algumas estruturas básicas:\r\n* **Color** - Composta por suas componentes RGBA\r\n* **Pixel** - Tem as coordenadas x, y, e a cor (tipo Color).\r\n* **Line** - Formada por dois Pixels, que são suas extremidades\r\n* **Triangle** - Composta por 3 Pixels que representam seus vértices\r\n\r\n## Rasterização de Pontos - putPixel\r\nJá sabemos como os pixels são armazenados na memória, também vimos como calcular o endereço de memoria de um pixel. No framework disponibilizado pelo professor temos o ponteiro FBptr que aponta para o endereço do primeiro byte do ColorBuffer(simulado). Com tudo isso em mãos, fica fácil implementar o putPixel: Calculamos o endereço do pixel com a expressão vista anteriormente, `e = x*4 + y*W*4`, e adicionamos ao ponteiro FBptr, para obter a posição do primeiro byte do pixel, e como ele é composto por 4 bytes, uma para cada componente, ficamos com (usaremos notação de array por conveniência):\r\n* Fbptr[e+0] - Aqui escrevemos o valor da componente R da cor do pixel\r\n* Fbptr[e+1] - Da mesma forma, escrevemos aqui o valor a componente G\r\n* Fbptr[e+2] - Aqui vai a componente B\r\n* Fbptr[e+3] - E por último o A\r\nApós escrevermos essas componentes já temos nosso pixel desenhado.\r\n\r\n## Rasterização de Linhas - drawLine\r\nAgora desenvolveremos um método para desenhar uma linha na tela, precisamos ter algumas coisas em mente:\r\n* Uma reta é um objeto continuo, então o que vamos criar é uma aproximação de uma reta em um espaço discreto, formado por pixels.\r\n* Uma reta ideal não tem espessura(apenas suas representações gráficas), portanto na tela, ela deve ser formada pela menor quantidade de pixels possíveis, desde que não comprometam sua representatividade. \r\n* Numa situação real, uma função de desenhar linhas, seria usada com bastante frequência, então ela deve ser o mais eficiente possível (precisar de menos recurso computacional).",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}