{
  "name": "TrabalhoICG",
  "tagline": "Rasterização de Primitivas",
  "body": "# Introdução\r\nEste post faz parte do primeiro trabalho da disciplina Introdução à Computação Gráfica, ministrada pelo Prof. Christian Azambuja Pagot da UFPB, no período 2016.1.\r\n\r\nDeve ser implementado um algoritmo para rasterização de pontos, linhas e triângulos, para isso, será usado um framework disponibilizado pelo próprio professor, que simula o acesso a memória, mais especificamente simula acesso ao ColorBuffer do FrameBuffer, onde fica as informações da imagem que aparece na tela do computador.\r\n\r\n### Pixels\r\nOs monitores exibem as imagens através de um conjuntos de pontos, chamados de pixel, dessa forma, um monitor tem W pixels de largura e H pixels de altura, como se fosse uma matriz W por H. \r\n\r\nCada pixel é representado na memória por um conjunto de 4 bytes, onde o primeiro dizemos que é o byte R(de red, vermelho), o segundo é o G(de green, verde), o terceiro é o B(de blue, azul), e o ultimo o A(alpha, controla a opacidade/transparência), com a combinação destes, podemos formar uma grande porção das cores visíveis ao olho humano. Como cada componente tem 1 byte (8 bits), ela pode assumir 256 valores diferentes que é na faixa de 0 a 255.\r\n\r\n![Composição de um Pixel](https://soaresgabriel.github.io/TrabalhoICG/images/pixelscreen.png)\r\n\r\nOs pixels são distribuídos na tela como uma matriz (bi-dimensional), mas na memoria eles são armazenados linearmente, de forma que os bytes dos pixeis da segunda linha são armazenados logo após os da primeira e assim sucessivamente. Há uma região reservada da memoria em que esses bytes são gravados, que é chamada de ColorBuffer.\r\n\r\nDessa forma tendo as coordenadas x e y de um pixel, podemos encontrar sua posição na memória através da expressão `x*4 + y*W*4`, onde a posição 0 indica primeira posição do ColorBuffer(e não da memoria em si).\r\n\r\n![Pixel na memória](https://soaresgabriel.github.io/TrabalhoICG/images/screenpixel.png)\r\n\r\n### Representação de Primitivas\r\nObviamente um monitor pode comportar um número limitado de pixels, então qualquer objeto que queiramos mostrar em uma tela, será formado por um conjunto finito de pixels. \r\n\r\nMas uma reta, por exemplo, é um objeto contínuo: pegando um ponto da reta, não conseguimos definir qual é o próximo ponto, pois entre quaisquer dois pontos de uma reta, existem infinitos pontos, não importa o quão próximos eles estejam. Dessa forma, para desenhar uma reta outro objeto continuo em uma tela, precisamos criar uma aproximação discreta que poderá ser representada por um conjunto finito de pontos, esse processo é chamado de **rasterização**.\r\n\r\n\r\n# Desenvolvimento do Projeto\r\nCom essa noção básica, podemos começar a desenvolver o projeto, ele consiste basicamente em desenvolver três funções:\r\n* **putPixel** - Rasterizar ponto (ou Pixel), com sua devida cor.\r\n* **drawLine** - Rasterizar linha, deve ter interpolação linear de cores\r\n* **drawTriangle** - Rasterizar triângulo\r\n\r\nPara simplificar, na implementação foi definido algumas estruturas básicas:\r\n* **Color** - Composta por suas componentes RGBA\r\n* **Pixel** - Tem as coordenadas x, y, e a cor (tipo Color).\r\n* **Line** - Formada por dois Pixels, que são suas extremidades\r\n* **Triangle** - Composta por 3 Pixels que representam seus vértices\r\n\r\n## Rasterização de Pontos - putPixel\r\nJá sabemos como os pixels são armazenados na memória, também vimos como calcular o endereço de memoria de um pixel. No framework disponibilizado pelo professor temos o ponteiro FBptr que aponta para o endereço do primeiro byte do ColorBuffer(simulado). Com tudo isso em mãos, fica fácil implementar o putPixel: Calculamos o endereço do pixel com a expressão vista anteriormente, `e = x*4 + y*W*4`, e adicionamos ao ponteiro FBptr, para obter a posição do primeiro byte do pixel, e como ele é composto por 4 bytes, uma para cada componente, ficamos com (usaremos notação de array por conveniência):\r\n* Fbptr[e+0] - Aqui escrevemos o valor da componente R da cor do pixel\r\n* Fbptr[e+1] - Da mesma forma, escrevemos aqui o valor a componente G\r\n* Fbptr[e+2] - Aqui vai a componente B\r\n* Fbptr[e+3] - E por último o A\r\nApós escrevermos essas componentes já temos nosso pixel desenhado.\r\n\r\n## Rasterização de Linhas - drawLine\r\nAgora desenvolveremos um método para desenhar uma linha na tela, precisamos ter algumas coisas em mente:\r\n* Uma reta é um objeto continuo, então o que vamos criar é uma aproximação de uma reta em um espaço discreto, formado por pixels.\r\n* Uma reta ideal não tem espessura(apenas suas representações gráficas), portanto na tela, ela deve ser formada pela menor quantidade de pixels possíveis, desde que não comprometam sua representatividade. \r\n* Numa situação real, uma função de desenhar linhas, seria usada com bastante frequência, então ela deve ser o mais eficiente possível (precisar de menos recurso computacional).\r\n\r\nPor enquanto nos limitaremos ao problema de rasterizar linhas de 0° a 45°, e levaremos em consideração que os pixels tem coordenadas como no plano cartesiano (eixo x positivo para direita, eixo y positivo para cima). Vejamos o seguinte exemplo:\r\n\r\n![Linha em Pixels](https://soaresgabriel.github.io/TrabalhoICG/images/linepixel.png)\r\n\r\nSabemos que temos que \"pintar\" o primeiro e último pixel, mas quais pixeis pintar no meio do caminho? Lembrando que a linha deve ser o mais fina possível, então o ideal é que em cada coluna, exatamente um pixel seja pintado, e ainda, que esse pixel pintado, seja o que a reta real passe mais próximo.\r\n\r\nUma solução fácil de ser observada é começarmos a incrementar x, e para cada x nós calculamos o y através da equação da reta, e arredondaríamos esse valor para um valor inteiro, dessa forma teríamos a coordenada y da qual a reta passa mais próximo, então pintaríamos esse pixel, e teríamos o seguinte:\r\n![Primeira Rasterização de Linha](https://soaresgabriel.github.io/TrabalhoICG/images/firstline.png)\r\nEsse é exatamente o resultado que queremos, mas observe que para cada iteração temos: mutiplição de decimais, soma de decimais, arredondamentos, e essas operações são muito caras, então essa resolução não é muito eficiente.\r\n\r\n#### Algoritmo de Braseham\r\nUma forma de obtermos o mesmo resultado, com menos custo computacional, é utilizar o algotitmo de braseham, como veremos a seguir.\r\n\r\nO algoritmo de Braseham parte da equação da reta y=(Δy/Δx)*x+b (passando y para a direita)-> (Δy/Δx)*x-y+b=0 (mutiplicando por Δx)-> Δy*x-Δx*y+Δx*b=0. Dessa forma obtemos a equação de um plano `Φ(x,y)=αx+βy+γ=0`, onde α=Δy, β=-Δx* e γ= Δx*b. Assim, se aplicarmos um ponto na função Φ(x,y), e o resultado der maior que 0, este ponto esta acima da reta, se der 0, este ponto está na reta, e se der menos que 0, esta abaixo da reta.\r\n\r\nAgora vejamos a seguinte situação: \r\n![Equação da reta](https://soaresgabriel.github.io/TrabalhoICG/images/linealgbras.png)\r\nDigamos que 'c'=(Xc, Yc) seja um pixel que já foi pintado, como estamos limitados a retas de 0 45°, observamos que o próximo pixel a ser pintado pode ser apenas o e=(Xc+1, Yc) ou o ne=(Xc+1, Yc+1). Para definir qual o Pixel a ser pintado, podemos calcular d=Φ(m), se o valor der positivo, significa que a reta real esta abaixo do ponto médio m, então o pixel a ser pintado deve ser o 'e' e se d der negativo, a reta está acima do ponto m, então devemos pintar o 'ne'.\r\n\r\nAgora observe que o valor de decisão 'd' pode ser obtido incrementando um valor ao valor anterior, para o caso onde o pixel 'e' foi escolhido, temos:\r\n![Variavel de decisão E](https://soaresgabriel.github.io/TrabalhoICG/images/DE.png)\r\nE no caso do pixel 'ne':\r\n![Variável de decisão NE](https://soaresgabriel.github.io/TrabalhoICG/images/DNE.png)\r\n\r\nAgora eliminamos as operações pesadas que tínhamos a cada iteração, de forma que agora, precisamos apenas efetuar algumas somas para definir o proximo pixel a ser pintado, então o algoritmo de Braseham é realmente muito eficiente para rasterizar retas.\r\n\r\n#### Generalização do Algoritimo de Braseham\r\nNas situações anteriores nos limitamos a retas do primeiro octante (0 a 45°), agora veremos como generalizar a técnica desenvolvida anteriormente, para o restante dos octantes. \r\n\r\nPara observar melhor o comportamento das retas em cada octante, a medida que vamos avançando no desenvolvimento, foi criada uma função que desenha os octantes na tela, na cor branca, sem usar a função drawLine, e outra que desenha uma reta de cada octante(partindo do centro da tela) usando a função drawLine, onde está implementado o algoritmo de braseham. Com o algoritimo atual, temos o seguinte resultado:\r\n\r\n![Rasterizada linha do octante 1](https://soaresgabriel.github.io/TrabalhoICG/images/lineoct1.png)\r\n\r\nA reta do primeiro octante foi desenhada, mas as dos demais ou foram desenhadas sobre os eixos dos octantes ou nem chegaram a ser desenhadas.\r\n\r\nVale ressaltar que o plano de pixels tem origem no canto superior esquerdo da tela, de forma que quando a coordenada y do pixel cresce, ele está mais para baixo, ao contrário do plano cartesiano, o qual estávamos representando anteriormente. Dessa forma temos a seguinte configuração:\r\n![octantes](https://soaresgabriel.github.io/TrabalhoICG/images/octantesreal.png)\r\n\r\nO algorítimo já está funcionando no 1° octante, agora observe que um segmento de reta cujo coeficiente angular seja do 5° octante, pode ser \"transformado\" em um segmento de reta do 1° octante (onde o algoritmo funciona) apenas permutando os pontos de inicio e fim da reta, temos essa mesma relação entre os octantes 2,7,8(onde Δx>0) e os octantes 6,3,4(onde Δx<0) respectivamente. Então façamos o seguinte `se Δx<0 -> permuta as extremidades do segmento de reta`, assim, as retas do 3° octante será transformada para o 7°, do 4° para o 8°, do 5° para o 1° (aqui o algoritmo já deve funcionar), então precisamos resolver agora para os octantes 2,7,8, que o resto virá em função desses. Vejamos como fica nossa tela com esta implementação:\r\n\r\n![Rasterizada linhas dos octantes 1 e 5](https://soaresgabriel.github.io/TrabalhoICG/images/lineoct15.png)\r\n\r\nComo esperado, a reta do 5° octante foi desenhada, não precisa se preocupar com essas outras retas estranhas que apareceram, elas são as retas que devem ser desenhadas nos outros octantes quando o algoritmo estiver completo.\r\n\r\nPara o 1° octante, y aumenta a medida que x aumenta, ou seja, para cada ponto (a,b) pintado, o próximo a ser pintado é o ponto (a+1, b) ou (a+1, b+1), para o oitavo octante, podemos usar a mesma lógica, mas pra ele escolheremos entre os pontos (a+1,b) ou (a+1,b-1), para isso basta que decrementemos a variável de decisão 'd' a cada iteração, ao invés de incrementa-la, e se d for positivo, pintamos (a+1,b), se negativo pintamos (a+1, b-1). Vejamos o resultado ao implementar essa lógica:\r\n\r\n![Rasterizada linhas nos octantes 1,3,5 e 8](https://soaresgabriel.github.io/TrabalhoICG/images/lineoct1358.png)\r\n\r\nA reta foi rasterizada corretamente, e como previsto anteriormente, a reta do 4° octante também foi desenhada.\r\n\r\nPara o octante 2 podemos trocar as coordenadas x e y de cada ponto de forma que ele é refletido para o octante 1 em relação a diagonal, nosso algorítimo consegue calcular os pontos para uma reta do primeiro octante, e depois de fazer o calculo, basta que troquemos novamente as coordenadas, para espelharmos de volta para o segundo octante. Fica mais ou menos assim: `se Δx < Δy -> permuta coordenadas dos pontos`, e na hora de desenhar na tela, permutamos novamente para voltar ao octante 2. E assim nosso algorítimo já deve desenhar retas do 2 e 6 quadrante, vejamos:\r\n\r\n![Linhas de todos os octantes rasterizadas](https://soaresgabriel.github.io/TrabalhoICG/images/lineallocts.png)\r\n\r\nSurpresa! As linhas de todos os octantes foram rasterizadas! Não há nenhum mistério, o mesmo código acima também refletiu o octante 7 no 8 e o 3 no 4, que são octantes que já resolvemos anteriormente, então agora nosso algoritmo consegue desenhar retas com qualquer inclinação! \r\n\r\n## Interpolação Linear de Cores\r\nAgora queremos que a reta vá mudando suavemente da cor do pixel A até a cor do pixel B, esse processo é chamado interpolação linear de cores.\r\n\r\nSabemos que o para desenhar a reta completa, o algoritmo itera Δx vezes, e em cada vez, ele desenha o próximo pixel da reta, ou seja, a reta é formada por Δx pixels. A ideia é que cada componente da cor (RGBA) vá aumentando (ou diminuindo) gradativamente ao longo da reta, de forma que no último pixel, ela tenha exato valor da cor da sua extremidade. Obs: mesmo nas situações em que Δy é maior, para o nosso algoritimo ele continua executando Δx vezes, pois ele faz uma troca das coordenadas.\r\n\r\nVamos exemplificar para o componente R (vermelho) da cor. Digamos que uma reta começa no ponto A, onde o componente vermelho é Ra=100, e termine no ponto B, onde o componente vermelho é de Rb=200, se Δx = 10, o componente R deve ser acrescentado em 10 para cada pixel, de que a reta sai de A com R=100 e chega em B com R=200.\r\n\r\nNo caso mais geral, podemos definir esse valor que deve ser adicionado por `addR=ΔR/Δx`, que pode ser interpretado como a taxa de variação de R em relação a x, ou o valor que R para cada vez que x aumenta em 1. Então o valor de R para cada pixel pode ser dado através da relação de recorrência `R=Ra+addR`, onde Ra agora simboliza o componente R do pixel anterior. Frequentemente esse valor vai dar um número decimal, e os componentes de cores são representados computacionalmente por números inteiros, então neste caso fazemos um trucamento, pois o arredondamento é mais pesado, e a diferença é tão pouca que não se justifica. Agora aplicamos o mesmo processo para as componentes G,B e A, e então já devemos ter nossa interpolação funcionando, vejamos alguns resultados:\r\n![Retas com cores interpoladas](https://soaresgabriel.github.io/TrabalhoICG/images/intepolation.png)\r\nConseguimos o resultado que queriamos, os pixels do inicio e do final da reta, tem o valor que definimos pra eles, e veja esse zoom na reta do 6° octante da 2ª imagem, e perceba o quão imperceptível é a diferença na cor de 2 pixels adjacentes:\r\n\r\n![Zoom em reta interpolada](https://soaresgabriel.github.io/TrabalhoICG/images/interpolationzoom.png)\r\n\r\n## Rasterização de Triângulos - drawTriangle\r\nAgora que temos o algoritimo que rasteriza linhas, aqui não resta muito o que fazer: nosso algoritimo deve receber os vértices A, B e C do triângulo, e rasterizar 3 linhas entre esses vértices: de A para B, de B para C e de C para A, pronto! já temos nosso triângulo. Observe alguns resultados:\r\n\r\n![Triângulos rasterizados](https://soaresgabriel.github.io/TrabalhoICG/images/rasttriangles.png) \r\n\r\n# Extra\r\n### Triangulo Preenchido - drawFilledTriangle\r\nPara desenhar um triângulo preenchido, podemos usar uma variação do algoritmo que desenvolvemos anteriormente para rasterização de linha, da seguinte forma: \r\nDigamos que temos um triângulo com vértices nos pontos A, B e C quaisquer, pegamos por exemplo a reta AB, e usamos o algoritmo para determinar a cor(usando interpolação) e quais pixeis devem ser pintados para formar essa reta, mas ao invés de pintarmos esse pixel, desenhamos uma reta do ponto C até cada pixel dessa reta. O resultado deve ser nosso triangulo preenchido, e devidamente interpolado, vejamos:\r\n\r\n![Triangulos preenchidos com erro](https://soaresgabriel.github.io/TrabalhoICG/images/filledtriangles1.png)\r\n\r\nTemos quase o resultado que queremos, mas tem alguns pontos pretos nos triângulos, isso acontece por que ao desenhar as retas, alguns pixels acabam não sendo pintados. Para tirar esse erro, podemos fazer o mesmo processo que fizemos da reta AB, para as outras duas retas do triângulo, ou seja, desenhamos retas que vão de A, para cada ponto da reta BC e de B para cada ponto da reta AC.\r\n![Triangulos preenchidos com erro](https://soaresgabriel.github.io/TrabalhoICG/images/filledtriangles2.png)\r\n\r\nAgora temos os triângulos preenchidos, sem os pontos pretos e devidamente interpolado.\r\n\r\n### Desenhar qualquer Polígono - drawPolygon\r\nCom o que já desenvolvemos, sem muita dificuldade podemos criar uma função para desenhar qualquer polígono. Essa função recebe dois parâmetros: Um conjunto(array) ordenado de pixels que são as arestas do polígono, e  a quantidade desses vértices, a partir dai basta que desenhemos uma linha para cada dois Pixels adjacentes desse conjunto, e também do ultimo pixel ao primeiro.\r\n\r\n![Poligono](https://soaresgabriel.github.io/TrabalhoICG/images/drawPolygon.png)\r\n\r\n### Polígono Preenchidos - drawFilledPolygon\r\nPodemos também definir uma função para desenhar um polígono preenchido. Dado um conjunto de pontos(juntamente com a sua quantidade), a função drawFilledPolygon desenha um triangulo preenchido com qualquer subconjunto possível de 3 pontos, passando os mesmos 6 pontos do drawPolygon, esse é o resultado que temos:\r\n\r\n![Polígono Preenchido](https://soaresgabriel.github.io/TrabalhoICG/images/drawFilledPolygon1.png)\r\n\r\nObserve que aqui a interpolação não funciona como deveria, isso acontece porque cada vez que desenhamos um triangulo, estamos levando em consideração a cor de apenas 3 pontos, aqui o calculo das cores para interpolação seria bem mais complicado e foge do escopo do trabalho. Então para ficar tão deselegante, podemos receber uma cor em nossa função, e pintar tudo nessa cor, veja um exemplo com a cor branca:\r\n\r\n![Poligono Preenchido](https://soaresgabriel.github.io/TrabalhoICG/images/drawFilledPolygon2.png)\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}